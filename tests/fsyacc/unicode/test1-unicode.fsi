// Signature file for parser generated by fsyacc
module TestParser
type token = 
  | IDENT of (string)
  | MINUS
  | STAR
  | LPAREN
  | RPAREN
  | PLUS
  | EOF
  | LET
  | IN
  | END
  | UNICODE1
  | UNICODE2
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_PLUS
    | TOKEN_EOF
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_UNICODE1
    | TOKEN_UNICODE2
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_decl
    | NONTERM_expr
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Tree.tree) 
